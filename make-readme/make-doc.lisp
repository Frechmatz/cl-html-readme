(in-package :cl-html-readme-make-doc)

;;
;; Generate documentation of cl-html-readme
;; Uses the docparser library https://github.com/eudoxia0/docparser
;;

;;
;; Docparser library integration
;;
;; The docparser library is based on ASDF systems
;; Each system is represented by a system index that is generated by docparser
;; All metadata lookups require a system index
;;

(defparameter *system-inventory* nil
  "The system index inventory. A property list holding the docparser indexes of the systems referenced by the documentation")

(defun init-system-inventory (systems)
  "Parse the given systems and set them as system index inventory.
   Each system is represented by a keyword.
   This function must be called before any dynamic variables exposed by packages are bound."
  (let ((indexes nil))
    (dolist (system systems)
      (push system indexes)
      (push (docparser:parse system) indexes))
    (setf *system-inventory* (reverse indexes))))
  
(defun get-system-index (system)
  "Get the index of a system."
  (let ((system-index (getf *system-inventory* system)))
    (if (not system-index)
	(error "Index for system ~a not found" system))
    system-index))

(defun get-node (system-index package-name symbol-name)
  "Retrieve a node from a system index"
  (aref (docparser:query
	 system-index
	 :package-name (string-upcase package-name)
	 :symbol-name (string-upcase symbol-name))
	0))

(defun get-symbol-docstring (system package-name symbol-name)
  "Get the documentation string of a symbol (function, dynamic variable, etc)"
  (docparser:node-docstring (get-node (get-system-index system) package-name symbol-name)))

(defun get-package-docstring (system package-name)
  "Get the documentation string of a package"
  (let ((docstring nil) (index (get-system-index system)))
    (docparser:do-packages (package index)
      (if (string= (string-upcase package-name) (docparser:package-index-name package))
	  (setf docstring (docparser:package-index-docstring package))))
    (if (not docstring)
	(error "Package ~a not found" package-name))
    docstring))

(defun get-function-lambda-list (system package-name symbol-name)
  "Get the lambda list of a function"
  (docparser:operator-lambda-list (get-node (get-system-index system) package-name symbol-name)))

;;
;; cl-html-readme specific HTML formatting helper functions
;;

(defun make-function-string (system package-name symbol-name)
  "Returns HTML representation of a function"
  (let* ((lambda-list (get-function-lambda-list system package-name symbol-name)))
    (concatenate
     'string
     "<b>" package-name ":" (string-downcase symbol-name) "</b>&nbsp;"
     (string-downcase (format nil "~a" (if lambda-list lambda-list "()")))
     "<p>" (get-symbol-docstring system package-name symbol-name) "</p>")))

(defun make-variable-string (system package-name symbol-name)
  "Returns HTML representation of a variable"
  (concatenate
   'string
   "<b>" package-name ":" (string-downcase symbol-name) "</b>&nbsp;"
   "<p>" (get-symbol-docstring system package-name symbol-name) "</p>"))
  
(defun make-code-string-from-file (path)
  "Returns HTML representation of a source code file"
  (concatenate
   'string
   "<p><pre><code>"
   (cl-html-readme:read-file path :replace-tabs t :escape t)
   "</code></pre></p>"))

(defun make-code-string-from-string (str)
  "Returns HTML representation of a string representing source code"
  (concatenate
   'string
   "<p><pre><code>"
   (cl-html-readme:read-string str :replace-tabs t :escape t)
   "</code></pre></p>"))

(defun now ()
  "Returns a string representing the current date and time."
  (multiple-value-bind (sec min hr day mon yr dow dst-p tz)
      (get-decoded-time)
    (declare (ignore dow dst-p tz))
    ;; 2018-09-19 21:28:16
    (let ((str (format nil "~4,'0d-~2,'0d-~2,'0d  ~2,'0d:~2,'0d:~2,'0d" yr mon day hr min sec)))
      str)))

;;
;; Create the documentation object of cl-html-readme
;;

(defun get-readme ()
  `("<html>"
    "<head><link href=\"cl-html-readme.css\" rel=\"stylesheet\" type=\"text/css\"/></head>"
    "<body>"
    (semantic
     (:name "header")
     (heading
      (:name "cl-html-readme"))
     ,(cl-html-readme:read-file "make-readme/snippets/introduction.html")
     "<p>The source code is available <a href=\"https://github.com/Frechmatz/cl-html-readme\">here</a>.</p>")
    (semantic
     (:name "nav")
     (heading
      (:name "Table of contents")
      (toc)))
    (semantic
     (:name "section")
     (heading
      (:name "Installation" :toc t)
      (heading
       (:name "Quicklisp")
       "<p><pre><code>(ql:quickload \"cl-html-readme\")</code></pre></p>"
       "The current Quicklisp release is version "
       ,(cl-html-readme:read-file "quicklisprelease.txt")))
     (heading
      (:name "Change-Log" :toc t)
      (heading
       (:name "Version 1.0.0")
       "<p>The first release of cl-html-readme.</p>")
      (heading
       (:name "Version 1.0.1")
       (heading
	(:name "Changes")
	"<ul>"
	"<li>HTML serialization inserts linebreaks for better readability and diff friendliness.</li>"
	"<li>Removed a couple of too fragile tests.</li>"
	"</ul>"))
      (heading
       (:name "Version 2.0.0")
       (heading
	(:name "Breaking changes")
	"<ul>"
	"<li>Support of HTML style and class attributes has been removed.</li></ul>")
       (heading
	(:name "Changes")
	"<ul>"
	"<li>Added read-stream and read-string to the API.</li>"
	"<li>Improved documentation.</li>"
	"<li>Increased test coverage.</li>"
	"<li>A more efficient implementation of the TOC generation.</li>"
	"</ul>")))
     (heading
      (:name "DSL" :toc t)
      ,(cl-html-readme:read-file "make-readme/snippets/dsl-introduction.html")
      (heading
       (:name "Examples")
       (heading
	(:name "Table of contents" :toc t)
	,(make-code-string-from-file "make-readme/examples/toc.lisp")
	(heading
	 (:name "Generated HTML")
	 ,(make-code-string-from-string
	   (cl-html-readme-make-readme-dsl-example-toc::example))))
       (heading
	(:name "Semantic elements" :toc t)
	,(make-code-string-from-file "make-readme/examples/semantic.lisp")
	(heading
	 (:name "Generated HTML")
	 ,(make-code-string-from-string
	   (cl-html-readme-make-readme-dsl-example-semantic::example))))))
     (heading
      (:name "API" :toc t)
      (heading
       (:name "*home-directory*" :toc t)
       ,(make-variable-string :cl-html-readme "cl-html-readme" "*home-directory*"))
      (heading
       (:name "*tab-width*" :toc t)
       ,(make-variable-string :cl-html-readme "cl-html-readme" "*tab-width*"))
      (heading
       (:name "doc-to-html" :toc t)
       ,(make-function-string :cl-html-readme "cl-html-readme" "doc-to-html"))
      (heading
       (:name "make-path" :toc t)
       ,(make-function-string :cl-html-readme "cl-html-readme" "make-path"))
      (heading
       (:name "read-string" :toc t)
       ,(make-function-string :cl-html-readme "cl-html-readme" "read-string")
       (heading
	(:name "Example")
	,(make-code-string-from-file "make-readme/examples/escape.lisp")
	(heading
	 (:name "Generated HTML")
	 ,(make-code-string-from-string
	   (cl-html-readme-make-readme-dsl-example-escape::example)))))
      (heading
       (:name "read-file" :toc t)
       ,(make-function-string :cl-html-readme "cl-html-readme" "read-file"))
      (heading
       (:name "read-stream" :toc t)
       ,(make-function-string :cl-html-readme "cl-html-readme" "read-stream")))
     (heading
      (:name "Run tests" :toc t)
      ,(make-code-string-from-string "(asdf:test-system :cl-html-readme)"))
     (heading
      (:name "Generate documentation" :toc t)
      ,(make-code-string-from-file "make-readme/snippets/generate-doc.lisp")))
    (semantic
     (:name "footer")
     "<hr/><p><small>Generated " ,(now) "</small></p>")
    "</body></html>"))

;;
;; Generate the documentation
;;

(defun make-doc ()
  (init-system-inventory (list :cl-html-readme))
  (let ((cl-html-readme:*home-directory* (asdf:system-source-directory :cl-html-readme))
	(cl-html-readme:*tab-width* 2))
    (with-open-file
	(fh (cl-html-readme:make-path "docs/index.html")
	    :direction :output
	    :if-exists :supersede
	    :if-does-not-exist :create
	    :external-format :utf-8)
      (cl-html-readme:doc-to-html fh (get-readme))))
  "DONE")

;;(make-doc)


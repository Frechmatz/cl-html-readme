(in-package :cl-html-readme-test)

(define-test test-tree-builder-1 ()
	     (let ((builder (make-instance 'cl-html-readme-dsl:tree-builder)))
	       (cl-html-readme-dsl:add-text builder "1")
	       (cl-html-readme-dsl:add-text builder "2")
	       (let ((tree (cl-html-readme-dsl:get-tree builder)))
		 (assert-equal 2 (length tree))
		 (assert-equal "1" (first tree))
		 (assert-equal "2" (second tree)))))

(define-test test-tree-builder-2 ()
	     (let ((builder (make-instance 'cl-html-readme-dsl:tree-builder)))
	       (cl-html-readme-dsl:open-element builder 'heading (list :name "heading-name"))
	       (cl-html-readme-dsl:close-element builder)
	       (let ((tree (cl-html-readme-dsl:get-tree builder)))
		 (assert-equal 1 (length tree))
		 (assert-equal 'heading (first (first tree)))
		 (assert-equal "heading-name" (getf (second (first tree)) :name)))))

(define-test test-tree-builder-3 ()
	     (let ((builder (make-instance 'cl-html-readme-dsl:tree-builder)))
	       (cl-html-readme-dsl:add-text builder "1")
	       (cl-html-readme-dsl:open-element builder 'heading (list :name "heading-name"))
	       (cl-html-readme-dsl:close-element builder)
	       (cl-html-readme-dsl:add-text builder "2")
	       (let ((tree (cl-html-readme-dsl:get-tree builder)))
		 (assert-equal 3 (length tree))
		 (assert-equal "1" (first tree))
		 (assert-equal 'heading (first (second tree)))
		 (assert-equal "heading-name" (getf (second (second tree)) :name))
		 (assert-equal "2" (third tree)))))

(define-test test-tree-builder-4 ()
	     (let ((builder (make-instance 'cl-html-readme-dsl:tree-builder)))
	       (cl-html-readme-dsl:add-text builder "1")
	       (cl-html-readme-dsl:open-element builder 'heading (list :name "heading-name"))
	       (cl-html-readme-dsl:add-text builder "1.1")
	       (cl-html-readme-dsl:close-element builder)
	       (cl-html-readme-dsl:add-text builder "2")
	       (let ((tree (cl-html-readme-dsl:get-tree builder)))
		 (assert-equal 3 (length tree))
		 (assert-equal "1" (first tree))
		 (assert-equal 'heading (first (second tree)))
		 (assert-equal "heading-name" (getf (second (second tree)) :name))
		 (assert-equal "1.1" (third (second tree)))
		 (assert-equal "2" (third tree)))))

(define-test test-tree-builder-unbalanced-tree ()
	     (let ((builder (make-instance 'cl-html-readme-dsl:tree-builder)))
	       (cl-html-readme-dsl:open-element builder 'heading (list :name "heading-name"))
	       (let ((catched-error nil))
		 (handler-case
		     (cl-html-readme-dsl:get-tree builder)
		   (error (err)
		     (setf catched-error err)))
		 (assert-true catched-error))))

(define-test test-tree-builder-invalid-text-1 ()
	     (let ((builder (make-instance 'cl-html-readme-dsl:tree-builder)))
	       (let ((catched-error nil))
		 (handler-case
		     (cl-html-readme-dsl:add-text builder :text-1)
		   (error (err)
		     (setf catched-error err)))
		 (assert-true catched-error))))

(define-test test-tree-builder-invalid-text-2 ()
	     (let ((builder (make-instance 'cl-html-readme-dsl:tree-builder)))
	       (let ((catched-error nil))
		 (handler-case
		     (cl-html-readme-dsl:add-text builder nil)
		   (error (err)
		     (setf catched-error err)))
		 (assert-true catched-error))))

(define-test test-tree-builder-invalid-element ()
	     (let ((builder (make-instance 'cl-html-readme-dsl:tree-builder)))
	       (let ((catched-error nil))
		 (handler-case
		     (cl-html-readme-dsl:open-element builder 'xxxx ())
		   (error (err)
		     (setf catched-error err)))
		 (assert-true catched-error))))

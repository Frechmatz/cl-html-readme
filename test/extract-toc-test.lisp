(in-package :cl-readme-test)

(define-test test-extract-toc-1 ()
	     (let ((doc '((heading (:name "H1" :toc t))
			  (heading (:name "H2" :toc t))
			  (heading (:name "H3" :toc t)))))
	       (let ((toc (cl-readme-dsl:extract-toc doc)))
		 ;; p ::= <properties>
		 ;; toc ::= (toc-root p (toc-item p) (toc-item p) (toc-item p))
		 (assert-true 5 (length toc))
		 (assert-true (cl-readme-dsl:toc-root-p (first toc)))
		 (let ((ti-1 (third toc)) (ti-2 (fourth toc)) (ti-3 (fifth toc)))
		   (assert-true (cl-readme-dsl:toc-item-p (first ti-1)))
		   (assert-equal "H1" (getf (second ti-1) :name))
		   (assert-true (cl-readme-dsl:toc-item-p (first ti-2)))
		   (assert-equal "H2" (getf (second ti-2) :name))
		   (assert-true (cl-readme-dsl:toc-item-p (first ti-3)))
		   (assert-equal "H3" (getf (second ti-3) :name))))))

(define-test test-extract-toc-2 ()
	     (let ((doc '((heading (:name "H1" :toc t))
			  (heading (:name "H2" :toc t)
			   (heading (:name "H2.1" :toc t))
			   (heading (:name "H2.2" :toc t)))
			  (heading (:name "H3" :toc t)))))
	       (let ((toc (cl-readme-dsl:extract-toc doc)))
		 ;; p ::= <properties>
		 ;; toc ::= (toc-root p (toc-item p) (toc-container p (toc-item p) (toc-item p))
		 ;; (toc-item p))
		 (assert-true 3 (length toc))
		 (assert-true (cl-readme-dsl:toc-root-p (first toc)))
		 (let ((ti-1 (third toc)) (tc-2 (fourth toc)) (ti-3 (fifth toc)))
		   (assert-true (cl-readme-dsl:toc-item-p (first ti-1)))
		   (assert-equal "H1" (getf (second ti-1) :name))
		   (assert-true (cl-readme-dsl:toc-container-p (first tc-2)))
		   (assert-equal "H2" (getf (second tc-2) :name))
		   (let ((tc-2-ti-1 (third tc-2))
			 (tc-2-ti-2 (fourth tc-2)))
		     (assert-true (cl-readme-dsl:toc-item-p (first tc-2-ti-1)))
		     (assert-equal "H2.1" (getf (second tc-2-ti-1) :name))
		     (assert-true (cl-readme-dsl:toc-item-p (first tc-2-ti-2)))
		     (assert-equal "H2.2" (getf (second tc-2-ti-2) :name))
		     (assert-true (cl-readme-dsl:toc-item-p (first ti-3)))
		     (assert-equal "H3" (getf (second ti-3) :name)))))))


(define-test test-extract-toc-3 ()
	     (let ((doc '((heading (:name "XXX")
			   (heading (:name "H1" :toc t))
			   "XXXX"
			   (heading (:name "XX"))
			   "XXXX"
			   (heading (:name "H2" :toc t)
			    (heading (:name "XXX")
				     (heading (:name "H2.1" :toc t))
				     (heading (:name "XXX"))
				     "XXXX"
				     (heading (:name "H2.2" :toc t))))
			   "XXXX"
			   (heading (:name "H3" :toc t))))))
	       (let ((toc (cl-readme-dsl:extract-toc doc)))
		 ;; p ::= <properties>
		 ;; toc ::= (toc-root p (toc-item p) (toc-container p (toc-item p) (toc-item p))
		 ;; (toc-item p))
		 (assert-true 3 (length toc))
		 (assert-true (cl-readme-dsl:toc-root-p (first toc)))
		 (let ((ti-1 (third toc)) (tc-2 (fourth toc)) (ti-3 (fifth toc)))
		   (assert-true (cl-readme-dsl:toc-item-p (first ti-1)))
		   (assert-equal "H1" (getf (second ti-1) :name))
		   (assert-true (cl-readme-dsl:toc-container-p (first tc-2)))
		   (assert-equal "H2" (getf (second tc-2) :name))
		   (let ((tc-2-ti-1 (third tc-2))
			 (tc-2-ti-2 (fourth tc-2)))
		     (assert-true (cl-readme-dsl:toc-item-p (first tc-2-ti-1)))
		     (assert-equal "H2.1" (getf (second tc-2-ti-1) :name))
		     (assert-true (cl-readme-dsl:toc-item-p (first tc-2-ti-2)))
		     (assert-equal "H2.2" (getf (second tc-2-ti-2) :name))
		     (assert-true (cl-readme-dsl:toc-item-p (first ti-3)))
		     (assert-equal "H3" (getf (second ti-3) :name)))))))


